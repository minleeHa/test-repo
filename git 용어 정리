/*
1. git init : 프로젝트 버전관리 시작하겠다는 초기화를 함 (맨아래 파란색 상태바에 master*라는 표시가 뜸) / 터미널에서 작성
2. git status : git의 현재 상태 확인, 추적되지않는 파일들은 빨간색으로 표시 / commits : 작업내역(버전)
3. git add . : 전체파일과 폴더들을 git으로 추적장치를 달아준다/ 이후 status로 다시 확인하면 파일들이 추적되는 형태로 바뀌었다는것->초록색으로 바뀜
4. git commit -m '' : ''안에 작업에 대한 메세지를 추가할수있다. e.g. git commit -m '프로젝트 생성'
                        commit은 버전을 생성하겠다는 의미를 갖는다(빨간색글씨를 초록색으로 바꾸고(추적) commit(버전생성)한다)

5. git log : 버전이 제대로 생성되었는지 확인이 가능 / (HEAD -> master) 표시가 떠있는것이 현재 버전이라는 표시
6. git branch 이름 : 브랜치 새로 생성 e.g. git branch add-style / 기능을 새로 추가하거나 하면 master브랜치말고 새로 브랜치를 생성해서 테스트해보는게 좋음
7. git branch : 프로젝트에서 관리되고있는 브랜치 목록들 출력 / 현재 선택되어있는 브랜치는 앞에 *가 붙어있음
8. git checkout 이름 : (이름) 브랜치로 관리 선택이동 e.g.git checkout add-style
9. git branch -d 이름 : '이름'의 브랜치를 삭제
10. git checkout -b 이름 : 브랜치를 생성하자마자 해당 브랜치로 이동한다
11. git merge '병합시킬파일이름' : 브랜치(프로젝트) 내용을 불러와 병합 e.g. git merge add-style
12. git reset --hard HEAD~ : 이전 버전으로 되돌릴 수 있다 (git log를 치면 나오는 목록에서 전 commit버전으로 되돌아감, 현재 있던 버전은 삭제됨)
13. git reset --hard HEAD~숫자 : 내가 원하는 버전으로 돌아갈수있음
14. git reset --hard 해당commit아이디 : 내가 지정한 commit아이디 버전으로 돌아갈수있음
15. git reset --hard ORIG_HEAD : reset을 통해 되돌렸을때 지워졌던 해당 버전을 다시 복구시킨다

16. git remote add 별칭이름(통상적으로 origin이라는 이름사용) 깃허브에서복사한저장할공간주소https : 깃허브(원격저장소)와 연결
e.g. git remote add origin https://github.com/minleeHa/test-repo.git

17. git 별칭이름 현재해당되는branch이름(master나abc같은) : 프로젝트를 깃허브에 업로드
e.g. git push origin master

*/